{"version":3,"sources":["concatSubtitles.ts","App.tsx","index.tsx"],"names":["last","arr","length","ignoreRegex","stripIgnored","x","replace","sentenceize","customWords","str","toUpperCase","isUpperCase","wordIdx","split","map","s","i","w","find","c","toLowerCase","slice","capitalize","join","_sentenceize","concat","rows","reduce","acc","tsStart","tsEnd","chunk","test","chunks","push","ts","sentence","fmtTs","frameRate","reverse","frames","rest","ms","String","a","b","n","sort","Math","round","toMs","Number","padStart","fmtSentence","toVtt","concated","entry","readFile","file","Promise","res","reader","FileReader","onload","e","target","result","readAsArrayBuffer","writeFile","filename","buf","mimeType","blob","Blob","type","link","document","createElement","href","window","URL","createObjectURL","fileName","download","click","defaultValues","JSON","parse","localStorage","getItem","App","useForm","register","watch","handleSubmit","files","useMemo","useRef","trim","useEffect","current","useState","setWorkbook","data","workbook","Excel","Workbook","xlsx","load","sheets","eachSheet","sheet","sheetId","_sheet","eachRow","row","rowNumber","_row","eachCell","cell","value","entries","id","val","properties","defaultRowHeight","columns","forEach","col","includes","width","colNumber","alignment","vertical","horizontal","wrapText","undefined","writeBuffer","toWrite","fileNameSansExt","name","content","vtt","idx","worksheets","TextEncoder","encode","zip","JSZip","generateAsync","Date","toISOString","onChange","setItem","stringify","ref","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.babe92c0.chunk.js","sourcesContent":["const last = <T>(arr: T[]) => arr[arr.length - 1]\n\nconst ignoreRegex = /(<[^>]+>)/g\n\nconst stripIgnored = (x: string) => x.replace(ignoreRegex, '')\n\nconst capitalize = (str: string) => str.slice(0, 1).toUpperCase() + str.slice(1)\n\ntype ConcatOptions = {\n\tcustomWords: string[]\n}\n\nconst _sentenceize = (customWords: string[]) => (str: string) => {\n\tlet wordIdx = -1\n\n\treturn str\n\t\t.split(ignoreRegex)\n\t\t.map((s, i) =>\n\t\t\ti % 2\n\t\t\t\t? s\n\t\t\t\t: s.replace(/\\w+/g, (w) => {\n\t\t\t\t\t\t++wordIdx\n\n\t\t\t\t\t\tconst customWord = customWords.find(\n\t\t\t\t\t\t\t(c) => c.toLowerCase() === w.toLowerCase(),\n\t\t\t\t\t\t)\n\n\t\t\t\t\t\tif (customWord) return customWord\n\n\t\t\t\t\t\treturn wordIdx === 0\n\t\t\t\t\t\t\t? capitalize(w.toLowerCase())\n\t\t\t\t\t\t\t: w.toLowerCase()\n\t\t\t\t  }),\n\t\t)\n\t\t.join('')\n}\n\nconst isUpperCase = (str: string) =>\n\tstripIgnored(str) === stripIgnored(str).toUpperCase()\n\nconst sentenceize = (customWords: string[]) => (str: string) =>\n\tisUpperCase(str) ? _sentenceize(customWords)(str) : str\n\nexport type Row = [tsStart: string, tsEnd: string, chunk: string]\n\nexport const toCellMatrix = (csv: string) =>\n\tcsv\n\t\t.trim()\n\t\t.split('\\n')\n\t\t.map((x) => x.split('\\t').map((x) => x.trim()) as Row)\n\nexport type Concated = {\n\tts: [string, string]\n\tsentence: string\n}[]\n\nexport const concat =\n\t({ customWords }: ConcatOptions) =>\n\t(rows: Row[]): Concated =>\n\t\trows\n\t\t\t.reduce((acc, [tsStart, tsEnd, chunk]) => {\n\t\t\t\tif (\n\t\t\t\t\t!acc.length ||\n\t\t\t\t\t/[.?!]$/.test(stripIgnored(last(last(acc).chunks)))\n\t\t\t\t) {\n\t\t\t\t\tacc.push({ ts: [], chunks: [] })\n\t\t\t\t}\n\n\t\t\t\tlast(acc).ts.push(tsStart)\n\t\t\t\tlast(acc).ts.push(tsEnd)\n\n\t\t\t\tlast(acc).chunks.push(chunk)\n\n\t\t\t\treturn acc\n\t\t\t}, [])\n\t\t\t.map(({ ts, chunks }) => ({\n\t\t\t\tts: [ts[0], last(ts)],\n\t\t\t\tsentence: chunks\n\t\t\t\t\t.join(' ')\n\t\t\t\t\t.split('.')\n\t\t\t\t\t.map(sentenceize(customWords))\n\t\t\t\t\t.join('.'),\n\t\t\t}))\n\nexport const toCsv = (concated: Concated) =>\n\tconcated.map(({ ts, sentence }) => [...ts, sentence].join('\\t')).join('\\n')\n\nconst FRAME_RATE = 30\n\nconst clamp = (a: number, b: number) => (n: number) =>\n\t[a, b, n].sort((a, b) => b - a)[1]\n\nconst toMs = (frameRate: number) => (frames: number) =>\n\tclamp(0, 999)(Math.round((frames / frameRate) * 1000))\n\nconst fmtTs = (frameRate: number) => (ts: string) => {\n\tconst [frames, ...rest] = ts.split(':').reverse()\n\n\tconst ms = String(toMs(frameRate)(Number(frames))).padStart(3, '0')\n\n\treturn [rest.reverse().join(':'), ms].join('.')\n}\n\nconst fmtSentence = (sentence: string) => `- ${sentence}`\n\nexport const toVtt = (concated: Concated) =>\n\tconcated\n\t\t.reduce(\n\t\t\t(acc, { ts, sentence }) => {\n\t\t\t\tconst entry = [\n\t\t\t\t\tts.map(fmtTs(FRAME_RATE)).join(' --> '),\n\t\t\t\t\tfmtSentence(sentence),\n\t\t\t\t].join('\\n')\n\n\t\t\t\treturn [...acc, entry]\n\t\t\t},\n\t\t\t['WEBVTT'],\n\t\t)\n\t\t.join('\\n\\n')\n\n// WEBVTT\n\n// 00:01.000 --> 00:04.000\n// - Never drink liquid nitrogen.\n\n// 00:05.000 --> 00:09.000\n// - It will perforate your stomach.\n// - You could die.\n","import { useEffect, useMemo, useRef, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { concat, Concated, Row, toVtt } from './concatSubtitles'\nimport Excel from 'exceljs'\nimport JSZip from 'jszip'\n\nexport const readFile = (file: File) =>\n\tnew Promise<ArrayBuffer>((res) => {\n\t\tconst reader = new FileReader()\n\n\t\treader.onload = (e) => res(e.target!.result as ArrayBuffer)\n\n\t\treader.readAsArrayBuffer(file)\n\t})\n\nexport const writeFile = (\n\tfilename: string,\n\tbuf: Buffer | Uint8Array | Blob,\n\tmimeType: string,\n) => {\n\tconst blob = new Blob([buf], {\n\t\ttype: mimeType,\n\t})\n\n\tconst link = document.createElement('a')\n\n\tlink.href = window.URL.createObjectURL(blob)\n\n\tconst fileName = filename\n\n\tlink.download = fileName\n\tlink.click()\n}\n\nconst init = {\n\tcustomWords: 'LED,V,AC,DC,DP,CP,ISO,E,I,R',\n}\n\nconst defaultValues: typeof init =\n\tJSON.parse(localStorage.getItem('form') ?? 'null') ?? init\n\ndelete (defaultValues as any).file\n\nexport const App = () => {\n\tconst { register, watch, handleSubmit } = useForm({\n\t\tdefaultValues,\n\t})\n\n\tconst changeHandler = (data: any) => {\n\t\tdelete data.file\n\n\t\tlocalStorage.setItem('form', JSON.stringify(data))\n\t}\n\n\tconst files: FileList = useMemo(\n\t\t() => watch('file') ?? ([] as any as FileList),\n\t\t[watch],\n\t)\n\n\tconst customWords = useRef(\n\t\t(watch('customWords')?.split(',') ?? []).map((x) => x.trim()),\n\t)\n\n\tuseEffect(() => {\n\t\tcustomWords.current = watch('customWords')?.split(',') ?? []\n\t}, [watch])\n\n\tconst [workbook, setWorkbook] = useState<Excel.Workbook | null>(null)\n\n\tuseEffect(() => {\n\t\tif (!files.length) return\n\t\t;(async () => {\n\t\t\tconst file = files[0]\n\t\t\tconst data = await readFile(file)\n\n\t\t\tconst workbook = new Excel.Workbook()\n\t\t\tawait workbook.xlsx.load(data)\n\n\t\t\ttype Sheet = Row[]\n\n\t\t\tconst sheets: Sheet[] = []\n\n\t\t\tworkbook.eachSheet((sheet, sheetId) => {\n\t\t\t\tconst _sheet = [] as any as Sheet\n\n\t\t\t\tsheets[sheetId] = _sheet\n\n\t\t\t\tsheet.eachRow((row, rowNumber) => {\n\t\t\t\t\tif (rowNumber === 1) return\n\n\t\t\t\t\tconst _row = [] as any as Row\n\n\t\t\t\t\t_sheet.push(_row)\n\n\t\t\t\t\trow.eachCell((cell) => {\n\t\t\t\t\t\t_row.push(String(cell.value))\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t})\n\n\t\t\tconst c = [...sheets.entries()].reduce((acc, [id, val]) => {\n\t\t\t\tif (!val) return acc\n\n\t\t\t\tacc[id] = concat({ customWords: customWords.current })(val)\n\n\t\t\t\treturn acc\n\t\t\t}, [] as Concated[])\n\n\t\t\tworkbook.eachSheet((sheet, sheetId) => {\n\t\t\t\tsheet.properties.defaultRowHeight = 0\n\n\t\t\t\tsheet.columns.forEach((col, i) => {\n\t\t\t\t\tif ([0, 1].includes(i)) {\n\t\t\t\t\t\tcol.width = 12\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tsheet.eachRow((row, rowNumber) => {\n\t\t\t\t\tif (rowNumber === 1) return\n\n\t\t\t\t\trow.eachCell((cell, colNumber) => {\n\t\t\t\t\t\tconst { ts, sentence } =\n\t\t\t\t\t\t\tc[sheetId]?.[\n\t\t\t\t\t\t\t\trowNumber - 2\n\t\t\t\t\t\t\t\t/* -1 for 0 indexing, -1 for header row */\n\t\t\t\t\t\t\t] ?? ({} as any)\n\n\t\t\t\t\t\tswitch (colNumber) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\tcell.alignment = {\n\t\t\t\t\t\t\t\t\tvertical: 'top',\n\t\t\t\t\t\t\t\t\thorizontal: 'left',\n\t\t\t\t\t\t\t\t\twrapText: true,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcell.value = ts?.[0]\n\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tcell.alignment = {\n\t\t\t\t\t\t\t\t\tvertical: 'top',\n\t\t\t\t\t\t\t\t\thorizontal: 'left',\n\t\t\t\t\t\t\t\t\twrapText: true,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcell.value = ts?.[1]\n\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tcell.alignment = {\n\t\t\t\t\t\t\t\t\tvertical: 'top',\n\t\t\t\t\t\t\t\t\thorizontal: 'left',\n\t\t\t\t\t\t\t\t\twrapText: true,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcell.value = sentence\n\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tcell.value = undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t})\n\n\t\t\tsetWorkbook(workbook)\n\n\t\t\tconst buf = await workbook.xlsx.writeBuffer()\n\n\t\t\tconst toWrite: {\n\t\t\t\tfilename: string\n\t\t\t\tcontent: Buffer | Uint8Array\n\t\t\t\tmimeType: string\n\t\t\t}[] = []\n\n\t\t\tconst fileNameSansExt = `${file.name\n\t\t\t\t.split('.')\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.join('.')}_concat`\n\n\t\t\ttoWrite.push({\n\t\t\t\tfilename: `${fileNameSansExt}.xlsx`,\n\t\t\t\tcontent: buf as Buffer,\n\t\t\t\tmimeType:\n\t\t\t\t\t'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n\t\t\t})\n\n\t\t\tc.map(toVtt).forEach((vtt, idx) => {\n\t\t\t\ttoWrite.push({\n\t\t\t\t\tfilename: `${\n\t\t\t\t\t\tworkbook.worksheets.find((x) => x.id === idx).name\n\t\t\t\t\t}.vtt`,\n\t\t\t\t\tcontent: new TextEncoder().encode(vtt),\n\t\t\t\t\tmimeType: 'text/plain',\n\t\t\t\t})\n\t\t\t})\n\n\t\t\tconst zip = new JSZip()\n\n\t\t\ttoWrite.forEach(({ filename, content, mimeType }) => {\n\t\t\t\tzip.file(filename, content, {})\n\t\t\t})\n\n\t\t\tconst content = await zip.generateAsync({ type: 'blob' })\n\n\t\t\twriteFile(\n\t\t\t\t`${fileNameSansExt}_${new Date().toISOString()}.zip`,\n\t\t\t\tcontent,\n\t\t\t\t'application/zip',\n\t\t\t)\n\t\t})()\n\t}, [files])\n\n\treturn (\n\t\t<form onChange={handleSubmit(changeHandler)}>\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\tUpload file (XLSX)\n\t\t\t\t<input type='file' name='file' ref={register} />\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\tWords not to lower-case (comma separated, case sensitive for\n\t\t\t\toutput)\n\t\t\t\t<textarea name='customWords' ref={register} />\n\t\t\t</label>\n\t\t</form>\n\t)\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n)\n"],"sourceRoot":""}